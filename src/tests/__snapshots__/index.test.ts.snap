// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`CSTVisitor > visit LetStatement 1`] = `
{
  "StateStack": [
    0,
    1,
  ],
  "cst": {
    "CstType": "Node",
    "children": [
      {
        "CstType": "Node",
        "children": [
          {
            "CstType": "TokenNode",
            "EndColumn": 3,
            "EndOffset": 2,
            "StartColumn": 1,
            "StartOffset": 0,
            "image": "let",
            "line": 1,
            "tokenIdx": 0,
            "type": "Let",
          },
          {
            "CstType": "TokenNode",
            "EndColumn": 8,
            "EndOffset": 7,
            "StartColumn": 5,
            "StartOffset": 4,
            "image": "test",
            "line": 1,
            "tokenIdx": 1,
            "type": "Identifier",
          },
          {
            "CstType": "TokenNode",
            "EndColumn": 10,
            "EndOffset": 9,
            "StartColumn": 10,
            "StartOffset": 9,
            "image": "=",
            "line": 1,
            "tokenIdx": 2,
            "type": "Equals",
          },
          {
            "CstType": "TokenNode",
            "EndColumn": 13,
            "EndOffset": 12,
            "StartColumn": 12,
            "StartOffset": 11,
            "image": "10",
            "line": 1,
            "tokenIdx": 3,
            "type": "NumberLiteral",
          },
        ],
        "type": "LetStatement",
      },
    ],
    "type": "Program",
  },
  "errors": [],
}
`;

exports[`CSTVisitor > visit Register req 1`] = `
CSTVisitor {
  "StateStack": [
    0,
    1,
  ],
  "callbacks": {},
  "cst": {
    "ErrorStateStack": [],
    "StateStack": [
      0,
      1,
    ],
    "cst": {
      "CstType": "Node",
      "children": [
        {
          "CstType": "Node",
          "children": [
            {
              "CstType": "TokenNode",
              "EndColumn": 3,
              "EndOffset": 2,
              "StartColumn": 1,
              "StartOffset": 0,
              "image": "let",
              "line": 1,
              "tokenIdx": 0,
              "type": "Let",
            },
            {
              "CstType": "TokenNode",
              "EndColumn": 8,
              "EndOffset": 7,
              "StartColumn": 5,
              "StartOffset": 4,
              "image": "test",
              "line": 1,
              "tokenIdx": 1,
              "type": "Identifier",
            },
            {
              "CstType": "TokenNode",
              "EndColumn": 10,
              "EndOffset": 9,
              "StartColumn": 10,
              "StartOffset": 9,
              "image": "=",
              "line": 1,
              "tokenIdx": 2,
              "type": "Equals",
            },
            {
              "CstType": "TokenNode",
              "EndColumn": 13,
              "EndOffset": 12,
              "StartColumn": 12,
              "StartOffset": 11,
              "image": "10",
              "line": 1,
              "tokenIdx": 3,
              "type": "NumberLiteral",
            },
          ],
          "type": "LetStatement",
        },
      ],
      "type": "Program",
    },
    "errors": [],
  },
  "cstErrors": [],
  "cstOld": {
    "CstType": "Node",
    "children": [
      {
        "CstType": "Node",
        "children": [
          {
            "CstType": "TokenNode",
            "EndColumn": 3,
            "EndOffset": 2,
            "StartColumn": 1,
            "StartOffset": 0,
            "image": "let",
            "line": 1,
            "tokenIdx": 0,
            "type": "Let",
          },
          {
            "CstType": "TokenNode",
            "EndColumn": 8,
            "EndOffset": 7,
            "StartColumn": 5,
            "StartOffset": 4,
            "image": "test",
            "line": 1,
            "tokenIdx": 1,
            "type": "Identifier",
          },
          {
            "CstType": "TokenNode",
            "EndColumn": 10,
            "EndOffset": 9,
            "StartColumn": 10,
            "StartOffset": 9,
            "image": "=",
            "line": 1,
            "tokenIdx": 2,
            "type": "Equals",
          },
          {
            "CstType": "TokenNode",
            "EndColumn": 13,
            "EndOffset": 12,
            "StartColumn": 12,
            "StartOffset": 11,
            "image": "10",
            "line": 1,
            "tokenIdx": 3,
            "type": "NumberLiteral",
          },
        ],
        "type": "LetStatement",
      },
    ],
    "type": "Program",
  },
}
`;

exports[`Lexer > create group 1`] = `
{
  "groupIndex": 0,
  "name": "TypeGroup",
  "tokenIndexs": Set {
    5,
    6,
  },
  "tokens": [
    {
      "name": "Typenumber",
      "pattern": /number/,
      "tokenIndex": 5,
    },
    {
      "name": "Typestring",
      "pattern": /string/,
      "tokenIndex": 6,
    },
  ],
}
`;

exports[`Lexer > create token 1`] = `
{
  "name": "Let",
  "pattern": /let/,
  "tokenIndex": 0,
}
`;

exports[`Lexer > tokenize succeed 1`] = `
{
  "Groups": [
    {
      "groupIndex": -1,
      "name": "SkipGroup",
      "tokenIndexs": Set {
        4,
      },
      "tokens": [
        {
          "name": "WhiteSpace",
          "pattern": /\\\\s\\+/,
          "tokenIndex": 4,
        },
      ],
    },
  ],
  "errors": [],
  "tokens": [
    {
      "endColumn": 3,
      "endOffset": 2,
      "image": "let",
      "line": 1,
      "startColumn": 1,
      "startOffset": 0,
      "tokenType": {
        "name": "Let",
        "pattern": /let/,
        "tokenIndex": 0,
      },
    },
    {
      "endColumn": 8,
      "endOffset": 7,
      "image": "test",
      "line": 1,
      "startColumn": 5,
      "startOffset": 4,
      "tokenType": {
        "name": "Identifier",
        "pattern": /\\[a-zA-Z_\\]\\\\w\\*/,
        "tokenIndex": 1,
      },
    },
    {
      "endColumn": 10,
      "endOffset": 9,
      "image": "=",
      "line": 1,
      "startColumn": 10,
      "startOffset": 9,
      "tokenType": {
        "name": "Equals",
        "pattern": /=/,
        "tokenIndex": 2,
      },
    },
    {
      "endColumn": 13,
      "endOffset": 12,
      "image": "10",
      "line": 1,
      "startColumn": 12,
      "startOffset": 11,
      "tokenType": {
        "name": "NumberLiteral",
        "pattern": /\\\\d\\+/,
        "tokenIndex": 3,
      },
    },
    {
      "endColumn": 14,
      "endOffset": 13,
      "image": "<EOF>",
      "line": 1,
      "startColumn": 14,
      "startOffset": 13,
      "tokenType": {
        "name": "<EOF>",
        "pattern": /<EOF>/,
        "tokenIndex": -1,
      },
    },
  ],
}
`;

exports[`Parser > parse Rule fail 1`] = `
{
  "ErrorStateStack": [
    0,
    4,
    6,
    7,
  ],
  "StateStack": [
    0,
    4,
    6,
    7,
  ],
  "cst": {
    "CstType": "TokenNode",
    "EndColumn": 3,
    "EndOffset": 2,
    "StartColumn": 1,
    "StartOffset": 0,
    "image": "let",
    "line": 1,
    "tokenIdx": 0,
    "type": "Let",
  },
  "errors": [
    {
      "ExpectedTokens": [
        "Identifier",
      ],
      "endColumn": 7,
      "found": "123",
      "line": 1,
      "startColumn": 5,
    },
    {
      "ExpectedTokens": [
        "NumberLiteral",
      ],
      "endColumn": 15,
      "found": "<EOF>",
      "line": 1,
      "startColumn": 15,
    },
  ],
}
`;

exports[`Parser > parse Rule succeed 1`] = `
{
  "ErrorStateStack": [],
  "StateStack": [
    0,
    1,
  ],
  "cst": {
    "CstType": "Node",
    "children": [
      {
        "CstType": "Node",
        "children": [
          {
            "CstType": "TokenNode",
            "EndColumn": 3,
            "EndOffset": 2,
            "StartColumn": 1,
            "StartOffset": 0,
            "image": "let",
            "line": 1,
            "tokenIdx": 0,
            "type": "Let",
          },
          {
            "CstType": "TokenNode",
            "EndColumn": 8,
            "EndOffset": 7,
            "StartColumn": 5,
            "StartOffset": 4,
            "image": "test",
            "line": 1,
            "tokenIdx": 1,
            "type": "Identifier",
          },
          {
            "CstType": "TokenNode",
            "EndColumn": 10,
            "EndOffset": 9,
            "StartColumn": 10,
            "StartOffset": 9,
            "image": "=",
            "line": 1,
            "tokenIdx": 2,
            "type": "Equals",
          },
          {
            "CstType": "TokenNode",
            "EndColumn": 13,
            "EndOffset": 12,
            "StartColumn": 12,
            "StartOffset": 11,
            "image": "10",
            "line": 1,
            "tokenIdx": 3,
            "type": "NumberLiteral",
          },
        ],
        "type": "LetStatement",
      },
    ],
    "type": "Program",
  },
  "errors": [],
}
`;

exports[`ParserTable > create Parser Table 1`] = `
{
  "ActionTable": {
    "0": {
      "-1": {
        "prod": 1,
        "type": "reduce",
      },
      "0": {
        "to": 4,
        "type": "shift",
      },
    },
    "1": {
      "-1": {
        "type": "accept",
      },
    },
    "10": {
      "-1": {
        "prod": 6,
        "type": "reduce",
      },
      "0": {
        "prod": 6,
        "type": "reduce",
      },
    },
    "2": {
      "-1": {
        "prod": 3,
        "type": "reduce",
      },
    },
    "3": {
      "-1": {
        "prod": 1,
        "type": "reduce",
      },
      "0": {
        "to": 4,
        "type": "shift",
      },
    },
    "4": {
      "1": {
        "to": 6,
        "type": "shift",
      },
    },
    "5": {
      "-1": {
        "prod": 2,
        "type": "reduce",
      },
    },
    "6": {
      "2": {
        "to": 7,
        "type": "shift",
      },
    },
    "7": {
      "3": {
        "to": 8,
        "type": "shift",
      },
    },
    "8": {
      "-1": {
        "prod": 4,
        "type": "reduce",
      },
      "0": {
        "prod": 4,
        "type": "reduce",
      },
      "5": {
        "to": 9,
        "type": "shift",
      },
      "6": {
        "to": 10,
        "type": "shift",
      },
    },
    "9": {
      "-1": {
        "prod": 5,
        "type": "reduce",
      },
      "0": {
        "prod": 5,
        "type": "reduce",
      },
    },
  },
  "GotoTable": {
    "0": {
      "10000": 1,
      "10001": 2,
      "10002": 3,
    },
    "1": {},
    "10": {},
    "2": {},
    "3": {
      "10001": 5,
      "10002": 3,
    },
    "4": {},
    "5": {},
    "6": {},
    "7": {},
    "8": {},
    "9": {},
  },
  "States": [
    {
      "items": [
        {
          "dot": 0,
          "lookaheads": Set {
            -1,
          },
          "productionIdx": 0,
        },
        {
          "dot": 0,
          "lookaheads": Set {
            -1,
          },
          "productionIdx": 3,
        },
        {
          "dot": 0,
          "lookaheads": Set {
            -1,
          },
          "productionIdx": 1,
        },
        {
          "dot": 0,
          "lookaheads": Set {
            -1,
          },
          "productionIdx": 2,
        },
        {
          "dot": 0,
          "lookaheads": Set {
            0,
            -1,
          },
          "productionIdx": 4,
        },
        {
          "dot": 0,
          "lookaheads": Set {
            0,
            -1,
          },
          "productionIdx": 5,
        },
        {
          "dot": 0,
          "lookaheads": Set {
            0,
            -1,
          },
          "productionIdx": 6,
        },
      ],
      "transitions": Map {
        10000 => 1,
        10001 => 2,
        10002 => 3,
        0 => 4,
      },
    },
    {
      "items": [
        {
          "dot": 1,
          "lookaheads": Set {
            -1,
          },
          "productionIdx": 0,
        },
      ],
      "transitions": Map {},
    },
    {
      "items": [
        {
          "dot": 1,
          "lookaheads": Set {
            -1,
          },
          "productionIdx": 3,
        },
      ],
      "transitions": Map {},
    },
    {
      "items": [
        {
          "dot": 1,
          "lookaheads": Set {
            -1,
          },
          "productionIdx": 2,
        },
        {
          "dot": 0,
          "lookaheads": Set {
            -1,
          },
          "productionIdx": 1,
        },
        {
          "dot": 0,
          "lookaheads": Set {
            -1,
          },
          "productionIdx": 2,
        },
        {
          "dot": 0,
          "lookaheads": Set {
            0,
            -1,
          },
          "productionIdx": 4,
        },
        {
          "dot": 0,
          "lookaheads": Set {
            0,
            -1,
          },
          "productionIdx": 5,
        },
        {
          "dot": 0,
          "lookaheads": Set {
            0,
            -1,
          },
          "productionIdx": 6,
        },
      ],
      "transitions": Map {
        10001 => 5,
        10002 => 3,
        0 => 4,
      },
    },
    {
      "items": [
        {
          "dot": 1,
          "lookaheads": Set {
            0,
            -1,
          },
          "productionIdx": 4,
        },
        {
          "dot": 1,
          "lookaheads": Set {
            0,
            -1,
          },
          "productionIdx": 5,
        },
        {
          "dot": 1,
          "lookaheads": Set {
            0,
            -1,
          },
          "productionIdx": 6,
        },
      ],
      "transitions": Map {
        1 => 6,
      },
    },
    {
      "items": [
        {
          "dot": 2,
          "lookaheads": Set {
            -1,
          },
          "productionIdx": 2,
        },
      ],
      "transitions": Map {},
    },
    {
      "items": [
        {
          "dot": 2,
          "lookaheads": Set {
            0,
            -1,
          },
          "productionIdx": 4,
        },
        {
          "dot": 2,
          "lookaheads": Set {
            0,
            -1,
          },
          "productionIdx": 5,
        },
        {
          "dot": 2,
          "lookaheads": Set {
            0,
            -1,
          },
          "productionIdx": 6,
        },
      ],
      "transitions": Map {
        2 => 7,
      },
    },
    {
      "items": [
        {
          "dot": 3,
          "lookaheads": Set {
            0,
            -1,
          },
          "productionIdx": 4,
        },
        {
          "dot": 3,
          "lookaheads": Set {
            0,
            -1,
          },
          "productionIdx": 5,
        },
        {
          "dot": 3,
          "lookaheads": Set {
            0,
            -1,
          },
          "productionIdx": 6,
        },
      ],
      "transitions": Map {
        3 => 8,
      },
    },
    {
      "items": [
        {
          "dot": 4,
          "lookaheads": Set {
            0,
            -1,
          },
          "productionIdx": 4,
        },
        {
          "dot": 4,
          "lookaheads": Set {
            0,
            -1,
          },
          "productionIdx": 5,
        },
        {
          "dot": 4,
          "lookaheads": Set {
            0,
            -1,
          },
          "productionIdx": 6,
        },
      ],
      "transitions": Map {
        5 => 9,
        6 => 10,
      },
    },
    {
      "items": [
        {
          "dot": 5,
          "lookaheads": Set {
            0,
            -1,
          },
          "productionIdx": 5,
        },
      ],
      "transitions": Map {},
    },
    {
      "items": [
        {
          "dot": 5,
          "lookaheads": Set {
            0,
            -1,
          },
          "productionIdx": 6,
        },
      ],
      "transitions": Map {},
    },
  ],
  "TokenMap": {
    "-1": "EOF",
    "0": "Let",
    "1": "Identifier",
    "2": "Equals",
    "3": "NumberLiteral",
    "4": "WhiteSpace",
    "5": "Typenumber",
    "6": "Typestring",
  },
  "nonterminalMap": {
    "LetStatement": 10002,
    "MANY_2": 10001,
    "Program": 10000,
  },
  "productions": [
    {
      "body": [
        10000,
      ],
      "head": "S'",
    },
    {
      "body": [],
      "head": "MANY_2",
    },
    {
      "body": [
        10002,
        10001,
      ],
      "head": "MANY_2",
    },
    {
      "body": [
        10001,
      ],
      "head": "Program",
    },
    {
      "body": [
        0,
        1,
        2,
        3,
      ],
      "head": "LetStatement",
    },
    {
      "body": [
        0,
        1,
        2,
        3,
        5,
      ],
      "head": "LetStatement",
    },
    {
      "body": [
        0,
        1,
        2,
        3,
        6,
      ],
      "head": "LetStatement",
    },
  ],
}
`;

exports[`ParserTable > create Production Table 1`] = `
[
  {
    "body": [],
    "head": "MANY_0",
  },
  {
    "body": [
      10002,
      10001,
    ],
    "head": "MANY_0",
  },
  {
    "body": [
      10001,
    ],
    "head": "Program",
  },
  {
    "body": [
      0,
      1,
      2,
      3,
    ],
    "head": "LetStatement",
  },
  {
    "body": [
      0,
      1,
      2,
      3,
      5,
    ],
    "head": "LetStatement",
  },
  {
    "body": [
      0,
      1,
      2,
      3,
      6,
    ],
    "head": "LetStatement",
  },
]
`;

exports[`Rule > test consume 1`] = `
{
  "body": [
    {
      "implType": "consume",
      "token": {
        "name": "Let",
        "pattern": /let/,
        "tokenIndex": 0,
      },
    },
    {
      "implType": "consume",
      "token": {
        "name": "Identifier",
        "pattern": /\\[a-zA-Z_\\]\\\\w\\*/,
        "tokenIndex": 1,
      },
    },
  ],
  "name": "RuleConsume",
}
`;

exports[`Rule > test many 1`] = `
{
  "body": [
    {
      "implType": "consume",
      "token": {
        "name": "Let",
        "pattern": /let/,
        "tokenIndex": 0,
      },
    },
    {
      "child": {
        "implType": "consume",
        "token": {
          "name": "Identifier",
          "pattern": /\\[a-zA-Z_\\]\\\\w\\*/,
          "tokenIndex": 1,
        },
      },
      "implType": "many",
    },
  ],
  "name": "RuleMany",
}
`;

exports[`Rule > test option 1`] = `
{
  "body": [
    {
      "implType": "consume",
      "token": {
        "name": "Let",
        "pattern": /let/,
        "tokenIndex": 0,
      },
    },
    {
      "child": {
        "implType": "consume",
        "token": {
          "name": "Identifier",
          "pattern": /\\[a-zA-Z_\\]\\\\w\\*/,
          "tokenIndex": 1,
        },
      },
      "implType": "option",
    },
  ],
  "name": "RuleOption",
}
`;

exports[`Rule > test or 1`] = `
{
  "body": [
    {
      "implType": "consume",
      "token": {
        "name": "Let",
        "pattern": /let/,
        "tokenIndex": 0,
      },
    },
    {
      "alternatives": [
        {
          "implType": "consume",
          "token": {
            "name": "Typenumber",
            "pattern": /number/,
            "tokenIndex": 5,
          },
        },
        {
          "implType": "consume",
          "token": {
            "name": "Typestring",
            "pattern": /string/,
            "tokenIndex": 6,
          },
        },
      ],
      "implType": "or",
    },
  ],
  "name": "RuleOr",
}
`;

exports[`Rule > test subRule 1`] = `
{
  "body": [
    {
      "getRule": [Function],
      "implType": "subrule",
    },
  ],
  "name": "SubRuleTest",
}
`;

exports[`Rule > test useGroup 1`] = `
{
  "body": [
    {
      "implType": "consume",
      "token": {
        "name": "Let",
        "pattern": /let/,
        "tokenIndex": 0,
      },
    },
    {
      "alternatives": [
        {
          "implType": "consume",
          "token": {
            "name": "Typenumber",
            "pattern": /number/,
            "tokenIndex": 5,
          },
        },
        {
          "implType": "consume",
          "token": {
            "name": "Typestring",
            "pattern": /string/,
            "tokenIndex": 6,
          },
        },
      ],
      "implType": "or",
    },
  ],
  "name": "RuleUseGroup",
}
`;
